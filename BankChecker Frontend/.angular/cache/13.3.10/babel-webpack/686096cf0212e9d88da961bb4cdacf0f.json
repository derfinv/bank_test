{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http) {\n      this.http = http;\n      this.host = environment.apiUrl;\n      this.token = \"\";\n      this.loggedInUsername = \"\";\n      this.jwtHelper = new JwtHelperService();\n    }\n    login(user) {\n      var headers = new HttpHeaders();\n      headers.append('Access-Control-Allow-Origin', '*');\n      return this.http.post(this.host + \"/api/v1/user/login\", user, {\n        observe: 'response',\n        withCredentials: true,\n        headers: headers\n      });\n    }\n    register(user) {\n      return this.http.post(this.host + \"/api/v1/user/register\", user);\n    }\n    validateToken(token) {\n      return this.http.get(this.host + \"/api/v1/user/validateToken?token=\" + token);\n    }\n    logout() {\n      this.token = \"\";\n      this.loggedInUsername = \"\";\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n    }\n    saveToken(token) {\n      this.token = token;\n      localStorage.setItem(\"token\", token);\n    }\n    addUserToLocalCache(user) {\n      localStorage.setItem(\"user\", JSON.stringify(user));\n    }\n    getUserFromLocalCache() {\n      return JSON.parse(localStorage.getItem('user') || \"\");\n    }\n    loadToken() {\n      this.token = localStorage.getItem(\"token\") || \"\";\n    }\n    getToken() {\n      return this.token;\n    }\n    isLoggedIn() {\n      var isLogged = false;\n      this.loadToken();\n      if (this.token != null && this.token !== '') {\n        if (this.jwtHelper.decodeToken(this.token).sub != null || '') {\n          if (!this.jwtHelper.isTokenExpired(this.token)) {\n            this.loggedInUsername = this.jwtHelper.decodeToken(this.token).sub;\n            isLogged = true;\n          }\n        }\n      } else {\n        this.logout();\n        isLogged = false;\n      }\n      return isLogged;\n    }\n  }\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}